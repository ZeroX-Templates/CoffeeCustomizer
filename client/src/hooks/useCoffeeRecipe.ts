import { useState, useCallback } from 'react';
import { coffeeTypes, milkTypes, toppingTypes, CoffeeType, MilkType, ToppingType } from '@/lib/coffeeData';
import { calculateNutrition, calculateAdvancedMetrics, NutritionInfo, AdvancedMetrics } from '@/lib/nutritionCalculator';
import { useToast } from '@/hooks/use-toast';

export interface CoffeeRecipe {
  coffeeType: string;
  milkType: string;
  sugarLevel: number;
  toppings: string[];
}

export interface RecipeData {
  coffee: CoffeeType;
  milk: MilkType;
  topping: ToppingType;
  nutrition: NutritionInfo;
  advancedMetrics: AdvancedMetrics;
}

export function useCoffeeRecipe() {
  const { toast } = useToast();
  const [recipe, setRecipe] = useState<CoffeeRecipe>({
    coffeeType: 'espresso',
    milkType: 'whole',
    sugarLevel: 2,
    toppings: ['none']
  });

  const [isLoading, setIsLoading] = useState(false);
  const [isSaveOnCooldown, setIsSaveOnCooldown] = useState(false);

  const getRecipeData = useCallback((): RecipeData => {
    const coffee = coffeeTypes.find(c => c.id === recipe.coffeeType) || coffeeTypes[0];
    const milk = milkTypes.find(m => m.id === recipe.milkType) || milkTypes[0];
    const topping = toppingTypes.find(t => t.id === recipe.toppings[0]) || toppingTypes[toppingTypes.length - 1];
    
    const nutrition = calculateNutrition(coffee, milk, recipe.sugarLevel, topping);
    const advancedMetrics = calculateAdvancedMetrics(coffee, milk, recipe.sugarLevel, topping, nutrition);

    return { coffee, milk, topping, nutrition, advancedMetrics };
  }, [recipe]);

  const updateCoffeeType = useCallback((coffeeType: string) => {
    setRecipe(prev => ({ ...prev, coffeeType }));
  }, []);

  const updateMilkType = useCallback((milkType: string) => {
    setRecipe(prev => ({ ...prev, milkType }));
  }, []);

  const updateSugarLevel = useCallback((sugarLevel: number) => {
    setRecipe(prev => ({ ...prev, sugarLevel }));
  }, []);

  const updateToppings = useCallback((topping: string) => {
    setRecipe(prev => ({ 
      ...prev, 
      toppings: topping === 'none' ? ['none'] : [topping]
    }));
  }, []);

  const saveFavorite = useCallback(() => {
    if (isSaveOnCooldown) return;

    try {
      localStorage.setItem('favoriteRecipe', JSON.stringify(recipe));
      setIsSaveOnCooldown(true);
      
      toast({
        title: "Recipe Saved!",
        description: "Your favorite recipe has been saved successfully.",
        duration: 3000,
      });

      // 5-second cooldown
      setTimeout(() => {
        setIsSaveOnCooldown(false);
      }, 5000);
    } catch (error) {
      toast({
        title: "Save Failed",
        description: "Unable to save your recipe. Please try again.",
        variant: "destructive",
        duration: 3000,
      });
    }
  }, [recipe, isSaveOnCooldown, toast]);

  const loadFavorite = useCallback(() => {
    setIsLoading(true);

    // Simulate loading time
    setTimeout(() => {
      try {
        const savedRecipe = localStorage.getItem('favoriteRecipe');
        if (savedRecipe) {
          const parsedRecipe = JSON.parse(savedRecipe);
          setRecipe(parsedRecipe);
          toast({
            title: "Recipe Loaded!",
            description: "Your favorite recipe has been loaded successfully.",
            duration: 3000,
          });
        } else {
          toast({
            title: "No Favorite Found",
            description: "You haven't saved a favorite recipe yet. Create one and save it!",
            variant: "destructive",
            duration: 3000,
          });
        }
      } catch (error) {
        toast({
          title: "Load Failed",
          description: "Unable to load your favorite recipe. Please try again.",
          variant: "destructive",
          duration: 3000,
        });
      } finally {
        setIsLoading(false);
      }
    }, 1500);
  }, [toast]);

  const exportRecipe = useCallback(() => {
    const data = getRecipeData();
    const recipeText = `
COFFEE CUSTOMIZER RECIPE
========================

Coffee Type: ${data.coffee.name}
Description: ${data.coffee.description}
Milk: ${data.milk.name}
Sugar: ${recipe.sugarLevel} teaspoons
Toppings: ${data.topping.name}

BREWING INSTRUCTIONS:
Temperature: ${data.coffee.temperature}
Brew Time: ${data.coffee.brewTime}

Steps:
${data.coffee.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n')}

NUTRITIONAL INFORMATION:
Calories: ${data.nutrition.calories}
Sugar: ${data.nutrition.sugar}g
Caffeine: ${data.nutrition.caffeine}mg
Protein: ${data.nutrition.protein}g

Generated by Coffee Customizer
${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([recipeText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${data.coffee.name.toLowerCase().replace(' ', '-')}-recipe.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);

    toast({
      title: "Recipe Exported!",
      description: "Your recipe has been downloaded as a text file.",
      duration: 3000,
    });
  }, [recipe, getRecipeData, toast]);

  return {
    recipe,
    recipeData: getRecipeData(),
    isLoading,
    isSaveOnCooldown,
    updateCoffeeType,
    updateMilkType,
    updateSugarLevel,
    updateToppings,
    saveFavorite,
    loadFavorite,
    exportRecipe
  };
}
