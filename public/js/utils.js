// Utility functions for the Coffee Customizer

// Toast notification system
function showToast(title, message, type = 'success') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type === 'error' ? 'error' : ''}`;
    
    toast.innerHTML = `
        <div class="toast-title">${title}</div>
        <div class="toast-message">${message}</div>
    `;
    
    container.appendChild(toast);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
        toast.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (container.contains(toast)) {
                container.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Modal control functions
function showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'block';
    }
}

function hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// Export recipe to text file
function exportRecipe(recipeData, recipe) {
    const { coffee, milk, topping, nutrition, advancedMetrics } = recipeData;
    
    const recipeText = `
COFFEE CUSTOMIZER RECIPE
========================

Coffee Type: ${coffee.name}
Description: ${coffee.description}
Milk: ${milk.name}
Sugar: ${recipe.sugarLevel} teaspoons
Toppings: ${topping.name}

BREWING INSTRUCTIONS:
Temperature: ${coffee.temperature}
Brew Time: ${coffee.brewTime}

Steps:
${coffee.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n')}

NUTRITIONAL INFORMATION:
Calories: ${nutrition.calories}
Sugar: ${nutrition.sugar}g
Caffeine: ${nutrition.caffeine}mg
Protein: ${nutrition.protein}g
Fat: ${nutrition.fat}g
Carbohydrates: ${nutrition.carbs}g
Fiber: ${nutrition.fiber}g
Sodium: ${nutrition.sodium}mg
Antioxidants: ${nutrition.antioxidants}

ADVANCED METRICS:
Health Score: ${advancedMetrics.healthScore}/100
Sugar Intensity: ${advancedMetrics.sugarIntensity}
Energy Profile: ${advancedMetrics.energyProfile}
Protein Quality: ${advancedMetrics.proteinQuality}
Glycemic Impact: ${advancedMetrics.glycemicImpact}
Caffeine per oz: ${advancedMetrics.caffeinePerOz}mg
Calories from Fat: ${advancedMetrics.caloriesFromFat}

Generated by Coffee Customizer
${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([recipeText], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${coffee.name.toLowerCase().replace(' ', '-')}-recipe.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}

// Local storage functions with error handling
function saveRecipeToLocalStorage(recipe) {
    try {
        localStorage.setItem('favoriteRecipe', JSON.stringify(recipe));
        return true;
    } catch (error) {
        console.error('Failed to save recipe:', error);
        return false;
    }
}

function loadRecipeFromLocalStorage() {
    try {
        const savedRecipe = localStorage.getItem('favoriteRecipe');
        return savedRecipe ? JSON.parse(savedRecipe) : null;
    } catch (error) {
        console.error('Failed to load recipe:', error);
        return null;
    }
}

// API functions for database operations
async function saveRecipeToDatabase(recipe) {
    try {
        const response = await fetch('/api/recipes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(recipe)
        });
        
        if (!response.ok) {
            throw new Error('Failed to save recipe to database');
        }
        
        return await response.json();
    } catch (error) {
        console.error('Database save error:', error);
        throw error;
    }
}

async function loadRecipesFromDatabase() {
    try {
        const response = await fetch('/api/recipes');
        
        if (!response.ok) {
            throw new Error('Failed to load recipes from database');
        }
        
        return await response.json();
    } catch (error) {
        console.error('Database load error:', error);
        throw error;
    }
}

async function deleteRecipeFromDatabase(id) {
    try {
        const response = await fetch(`/api/recipes/${id}`, {
            method: 'DELETE'
        });
        
        if (!response.ok) {
            throw new Error('Failed to delete recipe from database');
        }
        
        return await response.json();
    } catch (error) {
        console.error('Database delete error:', error);
        throw error;
    }
}

// Format nutrition badge classes
function getNutritionBadgeClass(value, type) {
    switch (type) {
        case 'sugar':
            if (value === 'Low') return 'badge-low';
            if (value === 'Medium') return 'badge-medium';
            if (value === 'High') return 'badge-high';
            return 'badge-very-high';
        case 'glycemic':
            if (value === 'Low') return 'badge-low';
            if (value === 'Medium') return 'badge-medium';
            return 'badge-high';
        case 'protein':
            if (value === 'Complete') return 'badge-complete';
            return 'badge-plant-based';
        default:
            return '';
    }
}

// Format health score bar class
function getHealthScoreClass(score) {
    if (score >= 80) return 'health-score-excellent';
    if (score >= 60) return 'health-score-good';
    if (score >= 40) return 'health-score-fair';
    return 'health-score-poor';
}

// Debounce function for performance optimization
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Animate elements on scroll (intersection observer)
function setupScrollAnimations() {
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.animation = 'fadeInUp 0.6s ease forwards';
            }
        });
    }, {
        threshold: 0.1
    });

    document.querySelectorAll('.card').forEach(card => {
        observer.observe(card);
    });
}

// Generate unique ID for recipes
function generateRecipeId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// Validate recipe data
function validateRecipe(recipe) {
    return recipe && 
           recipe.coffeeType && 
           recipe.milkType && 
           typeof recipe.sugarLevel === 'number' && 
           recipe.toppings && 
           Array.isArray(recipe.toppings);
}

// Format numbers for display
function formatNumber(num, decimals = 1) {
    return Number(num).toFixed(decimals);
}

// Add CSS animation keyframes dynamically
function addAnimationStyles() {
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
        
        .card {
            opacity: 0;
        }
    `;
    document.head.appendChild(style);
}